function GallantReflexok(ID1,ID2,ID3,ID4,ID5,ID6)
global dcps;
global massimo
global minimo
T1=[ -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44328, -0.44175, -0.44328, -0.44175, -0.44175, -0.44175, -0.44328, -0.44175, -0.44328, -0.44328, -0.44175, -0.44328, -0.44328, -0.44175, -0.44328, -0.44175, -0.44175, -0.44328, -0.44175, -0.44328, -0.44328, -0.44175, -0.44328, -0.44328, -0.44328, -0.44328, -0.44175, -0.44175, -0.44175, -0.44328, -0.44175, -0.44175, -0.44175, -0.44328, -0.44175, -0.44175, -0.44175, -0.44175, -0.44175, -0.44175, -0.44175, -0.43561, -0.43561, -0.43561, -0.42948, -0.42181, -0.41721, -0.40954, -0.39880, -0.38959, -0.38192, -0.37272, -0.36505, -0.36198, -0.35738, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35585, -0.35431, -0.34511, -0.33590, -0.32517, -0.30983, -0.29295, -0.27915, -0.27301, -0.26841, -0.26227, -0.25307, -0.25000, -0.24233, -0.23313, -0.22085, -0.21012, -0.19938, -0.18711, -0.17177, -0.15949, -0.14569, -0.13342, -0.11808, -0.10427, -0.09200, -0.07666, -0.06132, -0.04905, -0.03677, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491, -0.03491];
T2=[ -1.86999, -1.86999, -1.86845, -1.86999, -1.86999, -1.86999, -1.86999, -1.86999, -1.86845, -1.86845, -1.86999, -1.86999, -1.86999, -1.86845, -1.86999, -1.86999, -1.86999, -1.86999, -1.86999, -1.86845, -1.86999, -1.86845, -1.86845, -1.86845, -1.86845, -1.86845, -1.86845, -1.86845, -1.86845, -1.86692, -1.85772, -1.85772, -1.85618, -1.85772, -1.85772, -1.85772, -1.85618, -1.85772, -1.85772, -1.85772, -1.85772, -1.85772, -1.85772, -1.85772, -1.85772, -1.85925, -1.85925, -1.86078, -1.86078, -1.86078, -1.86692, -1.86692, -1.86845, -1.86845, -1.86845, -1.86845, -1.86845, -1.86845, -1.87152, -1.87152, -1.87459, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87612, -1.87766, -1.87766, -1.87766, -1.87766, -1.88073, -1.88379, -1.88533, -1.88840, -1.88993, -1.89146, -1.89453, -1.90067, -1.90527, -1.91141, -1.91754, -1.92214, -1.92521, -1.93135, -1.93595, -1.94515, -1.95436, -1.96356, -1.96970, -1.97430, -1.97583, -1.97737, -1.98044, -1.98504, -1.98811, -1.99424, -1.99884, -2.00191, -2.00805, -2.01572, -2.02339, -2.03106, -2.03719, -2.04333, -2.05253, -2.05714, -2.06481, -2.06787, -2.07401, -2.07708, -2.08321, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08475, -2.07861, -2.07554, -2.06941, -2.06481, -2.06174, -2.05867, -2.05253, -2.04486, -2.03566, -2.02492, -2.01418, -2.00038, -1.98964, -1.97583, -1.96203, -1.94669, -1.92828, -1.91447, -1.89913, -1.88533, -1.86999, -1.85772, -1.84238, -1.83471, -1.82090, -1.81323, -1.79329, -1.78255, -1.76721, -1.75187, -1.73806, -1.72579, -1.70738, -1.69051, -1.67517, -1.65830, -1.63989, -1.62148, -1.60154, -1.58466, -1.57239, -1.54938, -1.52484, -1.50490, -1.48495, -1.46655, -1.44814, -1.43280, -1.41439, -1.39752, -1.38064, -1.35763, -1.34996, -1.33462, -1.31928, -1.30241, -1.28707, -1.27019, -1.25792, -1.24258, -1.23031, -1.21804, -1.20270, -1.19043, -1.17509, -1.15975, -1.14594, -1.13367, -1.11986, -1.10912, -1.09839, -1.08918, -1.08765, -1.08611, -1.08458, -1.08458, -1.08458, -1.08458, -1.08305, -1.08305, -1.08305, -1.08305, -1.08305, -1.08305, -1.08305, -1.08305, -1.08305, -1.08305, -1.08458, -1.08611, -1.08611, -1.08765, -1.09532, -1.09532, -1.09532, -1.09685, -1.09532, -1.09532, -1.09532, -1.09532, -1.09532, -1.09685, -1.09685, -1.09685, -1.09685, -1.09532, -1.09532, -1.09685, -1.09532, -1.09532, -1.09532, -1.09532, -1.09685, -1.09532, -1.09532, -1.09685, -1.09685, -1.09532, -1.09532, -1.09532, -1.09532, -1.09532, -1.09685, -1.09532, -1.09685, -1.09532, -1.09532];
T3=[ 1.58765, 1.58765, 1.58765, 1.59072, 1.59225, 1.59225, 1.59378, 1.59532, 1.59839, 1.59992, 1.59839, 1.59839, 1.59685, 1.59839, 1.59839, 1.59839, 1.59532, 1.59072, 1.58458, 1.57998, 1.57691, 1.57384, 1.57231, 1.56617, 1.56157, 1.55697, 1.55083, 1.54470, 1.54009, 1.54009, 1.54009, 1.54470, 1.54930, 1.54930, 1.54930, 1.54470, 1.54009, 1.54009, 1.54009, 1.54009, 1.54470, 1.55083, 1.55543, 1.56004, 1.56310, 1.56310, 1.56464, 1.56310, 1.56310, 1.56310, 1.56310, 1.56310, 1.56310, 1.56310, 1.56310, 1.56464, 1.56464, 1.56464, 1.56464, 1.57077, 1.57077, 1.57077, 1.57077, 1.57231, 1.57231, 1.57231, 1.57231, 1.57231, 1.57231, 1.57231, 1.57077, 1.57077, 1.56924, 1.56924, 1.56771, 1.56464, 1.55543, 1.55237, 1.55083, 1.55083, 1.54930, 1.54776, 1.54316, 1.53856, 1.53242, 1.52475, 1.51708, 1.50788, 1.49561, 1.48180, 1.46339, 1.44805, 1.43118, 1.41584, 1.39897, 1.38209, 1.36215, 1.34681, 1.33147, 1.31920, 1.30846, 1.29926, 1.29465, 1.29312, 1.28852, 1.28085, 1.27471, 1.27471, 1.27011, 1.26397, 1.25477, 1.24863, 1.23943, 1.22869, 1.22102, 1.20261, 1.19494, 1.18114, 1.16580, 1.13972, 1.11211, 1.09217, 1.07376, 1.05075, 1.03234, 1.00626, 0.98018, 0.95564, 0.93263, 0.90809, 0.88201, 0.84366, 0.78383, 0.70406, 0.65958, 0.65804, 0.65344, 0.64424, 0.63043, 0.61509, 0.59975, 0.58441, 0.56907, 0.55220, 0.53532, 0.52152, 0.50464, 0.49084, 0.47703, 0.46169, 0.44789, 0.43408, 0.42181, 0.40954, 0.40033, 0.39113, 0.38192, 0.37579, 0.37119, 0.36812, 0.36812, 0.36812, 0.36812, 0.36812, 0.36812, 0.36812, 0.36812, 0.36812, 0.36812, 0.36812, 0.37119, 0.37579, 0.37732, 0.37732, 0.37732, 0.37732, 0.37886, 0.37886, 0.37886, 0.37886, 0.37886, 0.38039, 0.37886, 0.37886, 0.37886, 0.37886, 0.38039, 0.38039, 0.38192, 0.38653, 0.39266, 0.39420, 0.39573, 0.39573, 0.40033, 0.40493, 0.41414, 0.42027, 0.42794, 0.43408, 0.43868, 0.44328, 0.45249, 0.45709, 0.46783, 0.47243, 0.47703, 0.47857, 0.48010, 0.48317, 0.48777, 0.49391, 0.50464, 0.51385, 0.51845, 0.52305, 0.52612, 0.53226, 0.54146, 0.54453, 0.54760, 0.55066, 0.55373, 0.55527, 0.55680, 0.55833, 0.56140, 0.56447, 0.56907, 0.57521, 0.58134, 0.58901, 0.59362, 0.60129, 0.61049, 0.61969, 0.62583, 0.63043, 0.63197, 0.63964, 0.64270, 0.64270, 0.64424, 0.64577, 0.65191, 0.65651, 0.66265, 0.66725, 0.67799, 0.69179, 0.70560, 0.71634, 0.72401, 0.73321, 0.74241, 0.75162, 0.76389, 0.77156, 0.77770, 0.78076, 0.78076, 0.78383, 0.78383, 0.78383, 0.78383, 0.78230, 0.78076, 0.78076, 0.77923, 0.77770, 0.77770, 0.77156, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76389, 0.76542, 0.76389, 0.76389, 0.76542, 0.76389, 0.76389, 0.76389, 0.76542, 0.76389, 0.76542, 0.76389, 0.76542, 0.76389, 0.76389, 0.76542, 0.76542, 0.76389, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542, 0.76542];
T4=[ 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33130, 0.33284, 0.33130, 0.33130, 0.33130, 0.33130, 0.33284, 0.33130, 0.33130, 0.33130, 0.33130, 0.32823, 0.32670, 0.32670, 0.32823, 0.32670, 0.32056, 0.31289, 0.31136, 0.31136, 0.31136, 0.31136, 0.31136, 0.31136, 0.31289, 0.31289, 0.31136, 0.31289, 0.31289, 0.31289, 0.31289, 0.31903, 0.32517, 0.32977, 0.33437, 0.33590, 0.34051, 0.34971, 0.36045, 0.37732, 0.39573, 0.41567, 0.43715, 0.45862, 0.48470, 0.52612, 0.54913, 0.58595, 0.61816, 0.64270, 0.66418, 0.68719, 0.71327, 0.73935, 0.76389, 0.78537, 0.80838, 0.82985, 0.85133, 0.87434, 0.89888, 0.92496, 0.94644, 0.96484, 0.98018, 0.99552, 1.01547, 1.03387, 1.05075, 1.06762, 1.07989, 1.09217, 1.10444, 1.11364, 1.12131, 1.12591, 1.12898, 1.13358, 1.13819, 1.13972, 1.14125, 1.14279, 1.14125, 1.14125, 1.14125, 1.14125, 1.14125, 1.14125, 1.14125, 1.14125, 1.14125, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13972, 1.13819, 1.13512, 1.13358, 1.13205, 1.12898, 1.12591, 1.11671, 1.11211, 1.10904, 1.10751, 1.10597, 1.10444, 1.10290, 1.09984, 1.08756, 1.07376, 1.06762, 1.06455, 1.06149, 1.05688, 1.05075, 1.04615, 1.04308, 1.04001, 1.03541, 1.02927, 1.02007, 1.01547, 1.00933, 1.00473, 1.00166, 0.99706, 0.99399, 0.98785, 0.98632, 0.98172, 0.98018, 0.97865, 0.97712, 0.97558, 0.97251, 0.96791, 0.96178, 0.95871, 0.95564, 0.95257, 0.94950, 0.94950, 0.94797, 0.94797, 0.94797, 0.94644, 0.94644, 0.94797, 0.94644, 0.94644, 0.94797, 0.94644, 0.94644, 0.94644, 0.94644, 0.94644, 0.94644, 0.94797, 0.94797, 0.94797, 0.94644, 0.94644, 0.94797, 0.94644, 0.94797, 0.94644, 0.94644, 0.94797, 0.94644, 0.94644, 0.94644, 0.94644, 0.94797, 0.94644, 0.94797, 0.94797, 0.94644, 0.94797, 0.94644, 0.94797, 0.94797, 0.94797, 0.94797, 0.94797, 0.94797, 0.94797, 0.94950, 0.94797, 0.94797, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.94950, 0.95411, 0.95411, 0.95564, 0.95717, 0.95871, 0.96024, 0.96331, 0.96791, 0.97251, 0.97405, 0.97405, 0.97558, 0.97558, 0.97558, 0.97558, 0.97558, 0.97865, 0.97865, 0.98018, 0.98018, 0.98172, 0.98172, 0.98172, 0.98325, 0.98172, 0.98172, 0.98172, 0.98172, 0.98172, 0.98172, 0.98172, 0.98172, 0.98172, 0.98172, 0.98172, 0.98018, 0.98018, 0.97865, 0.97712, 0.97558, 0.96638, 0.96024, 0.95717, 0.95564, 0.95717, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564, 0.95564];
%plot(1:size(T1),T1)
size(T1);

for i=1:300
leftMatrix(i,:)=fLeftHand([T3(i);T4(i);T2(i);T1(i)]);end;


% plot3(leftMatrix(:,1),leftMatrix(:,2),leftMatrix(:,3),'-b');
% %axis([0 300 0 300 0 300])
% axis equal

% leftMatrix(:,1)'
% leftMatrix(:,2)'
% leftMatrix(:,3)'
% leftMatrix(:,4)'
% leftMatrix(:,5)'
% leftMatrix(:,6)'

% name1='GalantLElbowRoll';
% name2='GalantLElbowYaw';
% name3='GalantLShoulderPitch';
% name4='GalantLShoulderRoll';
% learn_dcp_batch(ID1,T1,name1);
% learn_dcp_batch(ID2,T2,name2);
% learn_dcp_batch(ID3,T3,name3);
% learn_dcp_batch(ID4,T4,name4);

 name1='GalantX';
 name2='GalantY';
 name3='GalantZ';
 name4='GalantWX';
 name5='GalantWY';
 name6='GalantWZ';
%  learn_dcp_batch(ID1,leftMatrix(:,1)',name1);
% learn_dcp_batch(ID2,leftMatrix(:,2)',name2);
% learn_dcp_batch(ID3,leftMatrix(:,3)',name3);

tau  = 0.5;
dt  = 0.001;
len=tau/dt;
x=1:300;
xx=linspace(1,300,floor(len+1)+ 3);
n_rfs     = [15 15 15 15 15 15];
time = (0:1:len)';
index=1;
for i=ID1:ID3
    
    traj=csaps(x,leftMatrix(:,index)',0.9,xx);
    
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len);
    index=index+1;
    T(:,i)=Y(:,1);%501 valori
    
   
    %%%%%%%%%%%%%%per plottare
    traj=traj(1:501)';
    figure;
    clf;
    plot(time,Y(:,1),'b -o',time,traj,'r');
    title('y');
    aa=axis;
    axis([min(time) max(time) aa(3:4)]);
    %%%%%%%%%%%%%%%%%%%%%%
 
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    goal(i)=T(floor(len+1),i);
end

%  learn_dcp_batch(ID4,leftMatrix(:,4)',name4);
%  learn_dcp_batch(ID5,leftMatrix(:,5)',name5);
%  learn_dcp_batch(ID6,leftMatrix(:,6)',name6);
  index=4;
for i=ID4:ID6
  
    traj=csaps(x,leftMatrix(:,index)',0.9,xx);
    
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len);
    index=index+1;
    T(:,i)=Y(:,1);%501 valori
    
   
    %%%%%%%%%%%%%%per plottare
    traj=traj(1:501)';
    figure;
    clf;
    plot(time,Y(:,1),'b -o',time,traj,'r');
    title('y');
    aa=axis;
    axis([min(time) max(time) aa(3:4)]);
    %%%%%%%%%%%%%%%%%%%%%%
 
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    goal(i)=T(floor(len+1),i);
end
 
 
%  hold on
%  plot3(Y1(:,1),Y2(:,1),Y3(:,1),'-r')
%  axis equal

% if(any(massimo==1000))
%     massimo(1)=max(T1);
%     massimo(2)=max(T2);
%     massimo(3)=max(T3);
%     massimo(4)=max(T4);
% else
%     if(max(T1)>massimo(1))
%         massimo(1)=max(T1);
%     end
%     if(max(T2)>massimo(2))
%         massimo(2)=max(T2);
%     end
%     if(max(T3)>massimo(3))
%         massimo(3)=max(T3);
%     end
%     if(max(T4)>massimo(4))
%         massimo(4)=max(T4);
%     end
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(T1);
%     minimo(2)=min(T2);
%     minimo(3)=min(T3);
%     minimo(4)=min(T4);
% else
%     if(min(T1)<minimo(1))
%         minimo(1)=min(T1);
%     end
%     if(min(T2)<minimo(2))
%         minimo(2)=min(T2);
%     end
%     if(min(T3)<minimo(3))
%         minimo(3)=min(T3);
%     end
%     if(min(T4)<minimo(4))
%          minimo(4)=min(T4);
%     end
% end


% if(any(massimo==1000))
%     massimo(1)=max(leftMatrix(:,1)');
%     massimo(2)=max(leftMatrix(:,2)');
%     massimo(3)=max(leftMatrix(:,3)');
%     massimo(4)=max(leftMatrix(:,4)');
%     massimo(5)=max(leftMatrix(:,5)');
%     massimo(6)=max(leftMatrix(:,6)');
% else
%     if(max(leftMatrix(:,1)')>massimo(1))
%         massimo(1)=max(leftMatrix(:,1)');
%     end
%     if(max(leftMatrix(:,2)')>massimo(2))
%         massimo(2)=max(leftMatrix(:,2)');
%     end
%     if(max(leftMatrix(:,3)')>massimo(3))
%         massimo(3)=max(leftMatrix(:,3)');
%     end
%     if(max(leftMatrix(:,4)')>massimo(4))
%         massimo(4)=max(leftMatrix(:,4)');
%     end
%     
%     if(max(leftMatrix(:,5)')>massimo(5))
%         massimo(5)=max(leftMatrix(:,5)');
%     end
%     
%     if(max(leftMatrix(:,6)')>massimo(6))
%         massimo(6)=max(leftMatrix(:,6)');
%     end
%     
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(leftMatrix(:,1)');
%     minimo(2)=min(leftMatrix(:,2)');
%     minimo(3)=min(leftMatrix(:,3)');
%     minimo(4)=min(leftMatrix(:,4)');
%     minimo(5)=min(leftMatrix(:,5)');
%     minimo(6)=min(leftMatrix(:,6)');
% else
%     if(min(leftMatrix(:,1)')>minimo(1))
%         minimo(1)=min(leftMatrix(:,1)');
%     end
%     if(min(leftMatrix(:,2)')>minimo(2))
%         minimo(2)=min(leftMatrix(:,2)');
%     end
%     if(min(leftMatrix(:,3)')>minimo(3))
%         minimo(3)=min(leftMatrix(:,3)');
%     end
%     if(min(leftMatrix(:,4)')>minimo(4))
%         minimo(4)=min(leftMatrix(:,4)');
%     end
%     
%     if(min(leftMatrix(:,5)')>minimo(5))
%         minimo(5)=min(leftMatrix(:,5)');
%     end
%     
%     if(min(leftMatrix(:,6)')>minimo(6))
%         minimo(6)=min(leftMatrix(:,6)');
%     end
%     
% end

end
    