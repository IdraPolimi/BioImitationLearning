function ATNRok(ID1,ID2,ID3,ID4,ID5,ID6)
global dcps;
global massimo
global minimo
T1=[ -0.15336, -0.15336, -0.15336, -0.15489, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15336, -0.15182, -0.15182, -0.15029, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13188, -0.13188, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13188, -0.13188, -0.13188, -0.13188, -0.13342, -0.13342, -0.13188, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13188, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13188, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13188, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13188, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13495, -0.13342, -0.13342, -0.13342, -0.13342, -0.13342, -0.13495, -0.13495, -0.13495, -0.13495, -0.13342, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13648, -0.13495, -0.13648, -0.13495, -0.13648, -0.13648, -0.13495, -0.13648, -0.13648, -0.13648, -0.13648, -0.13648, -0.13648, -0.13495, -0.13648, -0.13648, -0.13495, -0.13495, -0.13648, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13342, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13342, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13648, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495, -0.13495];
T2=[ -0.20253, -0.20253, -0.20253, -0.20100, -0.20253, -0.20100, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20100, -0.20253, -0.20253, -0.20100, -0.20253, -0.20100, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.20253, -0.21020, -0.21020, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21327, -0.21173, -0.21327, -0.21327, -0.21327, -0.21327, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21327, -0.21173, -0.21327, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21327, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21327, -0.21173, -0.21173, -0.21173, -0.21173, -0.21327, -0.21173, -0.21327, -0.21173, -0.21173, -0.21327, -0.21327, -0.21173, -0.21327, -0.21327, -0.21327, -0.21327, -0.21327, -0.21327, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21480, -0.21173, -0.20560, -0.20253, -0.19793, -0.19179, -0.18412, -0.17338, -0.16418, -0.15498, -0.14731, -0.13810, -0.12890, -0.11663, -0.10435, -0.08901, -0.07674, -0.06600, -0.04606, -0.03993, -0.02152, -0.01538, -0.00464, 0.00456, 0.01376, 0.02297, 0.03217, 0.03984, 0.04598, 0.05211, 0.05518, 0.05825, 0.06439, 0.06745, 0.06745, 0.07359, 0.07819, 0.08279, 0.08740, 0.09046, 0.09200, 0.09507, 0.09660, 0.09967, 0.10120, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10274, 0.10427, 0.10427, 0.10580, 0.10734, 0.11041, 0.11654, 0.11961, 0.12268, 0.12421, 0.12728, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12728, 0.12728, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12728, 0.12728, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12728, 0.12881, 0.12881, 0.12881, 0.12881, 0.12881, 0.12728, 0.12881, 0.12881, 0.12881];
T3=[ 1.64594, 1.64441, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64441, 1.64594, 1.64594, 1.64441, 1.64594, 1.64594, 1.64594, 1.64594, 1.64594, 1.64441, 1.64594, 1.64594, 1.64594, 1.64441, 1.64594, 1.64594, 1.63827, 1.63060, 1.62140, 1.61373, 1.60299, 1.59072, 1.57844, 1.57077, 1.56157, 1.55543, 1.55237, 1.55083, 1.55083, 1.55083, 1.55083, 1.54930, 1.54930, 1.55083, 1.54930, 1.54930, 1.54776, 1.54623, 1.54316, 1.54009, 1.53856, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53703, 1.53549, 1.53549, 1.53549, 1.53549, 1.53549, 1.53242, 1.52936, 1.52782, 1.52322, 1.51862, 1.51402, 1.50941, 1.50635, 1.50174, 1.49714, 1.49407, 1.49101, 1.48947, 1.48640, 1.48487, 1.48334, 1.48027, 1.47567, 1.47260, 1.46646, 1.46033, 1.45112, 1.43885, 1.41891, 1.41277, 1.39897, 1.38823, 1.38056, 1.37442, 1.36829, 1.36368, 1.36215, 1.36062, 1.36062, 1.36062, 1.35755, 1.35448, 1.34988, 1.34528, 1.34221, 1.33454, 1.32840, 1.32073, 1.31306, 1.30693, 1.29926, 1.29159, 1.28238, 1.26704, 1.25477, 1.24250, 1.22869, 1.21335, 1.19955, 1.18267, 1.17040, 1.14892, 1.12745, 1.10751, 1.07683, 1.05228, 1.03081, 1.01086, 0.99246, 0.98018, 0.95717, 0.93416, 0.91576, 0.90042, 0.88508, 0.87280, 0.85900, 0.84519, 0.83292, 0.82065, 0.80684, 0.79150, 0.77923, 0.76696, 0.75469, 0.74395, 0.73321, 0.72094, 0.70560, 0.69486, 0.68412, 0.67032, 0.65804, 0.63964, 0.62583, 0.61202, 0.60282, 0.59668, 0.59362, 0.59055, 0.59055, 0.59208, 0.59208, 0.59208, 0.59055, 0.59055, 0.59208, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59208, 0.59208, 0.59055, 0.59055, 0.59055, 0.59055, 0.59208, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.58901, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59208, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59055, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59208, 0.59362, 0.59208, 0.59208, 0.59362, 0.59362, 0.59362, 0.59362, 0.59362, 0.59362, 0.59362, 0.59362, 0.59362, 0.59208, 0.59208, 0.59208, 0.59362, 0.59208, 0.59208, 0.59208, 0.59362, 0.59208, 0.59208, 0.59055, 0.59055, 0.59208, 0.59055, 0.59055, 0.59055];
T4=[ 0.34511, 0.34357, 0.34511, 0.34511, 0.34511, 0.34511, 0.34357, 0.34511, 0.34357, 0.34357, 0.34511, 0.34511, 0.34511, 0.34357, 0.34511, 0.34511, 0.34511, 0.34511, 0.34357, 0.34511, 0.34511, 0.34511, 0.34511, 0.34511, 0.34511, 0.34511, 0.34357, 0.34511, 0.34357, 0.34511, 0.34511, 0.34357, 0.34511, 0.34511, 0.34357, 0.34357, 0.34357, 0.34357, 0.34511, 0.34664, 0.35738, 0.36965, 0.37732, 0.38499, 0.38499, 0.38499, 0.38653, 0.38959, 0.39573, 0.41107, 0.42641, 0.43868, 0.45249, 0.46476, 0.47857, 0.48777, 0.50004, 0.51845, 0.52305, 0.53532, 0.54299, 0.54913, 0.55680, 0.56447, 0.57214, 0.57828, 0.58441, 0.59362, 0.60435, 0.61356, 0.62276, 0.62890, 0.63350, 0.63964, 0.64424, 0.65344, 0.66265, 0.67338, 0.68259, 0.69333, 0.70406, 0.71634, 0.72707, 0.73935, 0.75008, 0.75775, 0.76389, 0.77003, 0.77770, 0.78843, 0.79764, 0.80838, 0.81758, 0.82832, 0.83599, 0.84519, 0.85133, 0.85746, 0.86207, 0.86974, 0.87741, 0.88508, 0.89428, 0.90502, 0.91422, 0.92343, 0.93110, 0.93723, 0.94337, 0.95104, 0.95717, 0.96791, 0.97712, 0.98632, 0.99399, 1.00013, 1.00166, 1.00319, 1.00780, 1.01086, 1.01700, 1.02467, 1.03387, 1.04768, 1.06149, 1.07376, 1.08143, 1.08603, 1.09217, 1.09677, 1.10290, 1.10751, 1.11364, 1.11978, 1.12438, 1.12745, 1.13205, 1.13665, 1.13972, 1.14125, 1.14279, 1.14279, 1.14279, 1.14279, 1.14279, 1.14279, 1.14125, 1.14279, 1.14279, 1.14279, 1.14125, 1.13972, 1.13972, 1.13972, 1.13819, 1.13819, 1.13819, 1.13358, 1.13052, 1.12745, 1.12285, 1.11671, 1.11671, 1.11671, 1.11671, 1.11671, 1.11671, 1.11671, 1.11518, 1.11364, 1.11211, 1.10904, 1.10751, 1.10597, 1.10597, 1.10444, 1.10444, 1.10137, 1.09523, 1.08910, 1.07989, 1.07069, 1.06302, 1.05688, 1.05075, 1.04768, 1.04461, 1.04154, 1.04001, 1.03848, 1.03541, 1.03234, 1.02927, 1.02620, 1.02467, 1.02314, 1.01853, 1.01547, 1.01547, 1.01547, 1.01547, 1.01547, 1.01547, 1.01547, 1.01700, 1.01547, 1.01547, 1.01547, 1.01547, 1.01547, 1.01547, 1.01547, 1.01700, 1.01700, 1.01700, 1.01547, 1.01547, 1.01700, 1.01547, 1.01700, 1.01700, 1.01700, 1.01700, 1.01547, 1.01547, 1.01547, 1.01547, 1.01700, 1.01547, 1.01700, 1.01547, 1.01700, 1.01547, 1.01700, 1.01700, 1.01700, 1.01700, 1.01547, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01853, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01700, 1.01853, 1.01853, 1.02007, 1.02007, 1.02007, 1.01853, 1.01853];
%versione giunti
%plot(1:size(T1),T1)
% size(T1)
% size(T2)
% size(T3)
% size(T4)
% name1='ATNRLElbowRoll';
% name2='ATNRLElbowYaw';
% name3='ATNRLShoulderPitch';
% name4='ATNRLShoulderRoll';
% learn_dcp_batch(ID1,T1,name1);
% learn_dcp_batch(ID2,T2,name2);
% learn_dcp_batch(ID3,T3,name3);
% learn_dcp_batch(ID4,T4,name4);
% if(any(massimo==1000))
%     massimo(1)=max(T1);
%     massimo(2)=max(T2);
%     massimo(3)=max(T3);
%     massimo(4)=max(T4);
% else
%     if(max(T1)>massimo(1))
%         massimo(1)=max(T1);
%     end
%     if(max(T2)>massimo(2))
%         massimo(2)=max(T2);
%     end
%     if(max(T3)>massimo(3))
%         massimo(3)=max(T3);
%     end
%     if(max(T4)>massimo(4))
%         massimo(4)=max(T4);
%     end
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(T1);
%     minimo(2)=min(T2);
%     minimo(3)=min(T3);
%     minimo(4)=min(T4);
% else
%     if(min(T1)<minimo(1))
%         minimo(1)=min(T1);
%     end
%     if(min(T2)<minimo(2))
%         minimo(2)=min(T2);
%     end
%     if(min(T3)<minimo(3))
%         minimo(3)=min(T3);
%     end
%     if(min(T4)<minimo(4))
%          minimo(4)=min(T4);
%     end
% end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for i=1:298
leftMatrix(i,:)=fLeftHand([T3(i);T4(i);T2(i);T1(i)]);

end;

name1='ATNRokX';
name2='ATNRokY';
name3='ATNRokZ';
name4='ATNRokWX';
name5='ATNRokWY';
name6='ATNRokWZ';

%  learn_dcp_batch(ID1,leftMatrix(:,1)',name1);
%  learn_dcp_batch(ID2,leftMatrix(:,2)',name2);
%  learn_dcp_batch(ID3,leftMatrix(:,3)',name3);
tau  = 0.5;
dt  = 0.001;
len=tau/dt;
x=1:298;
xx=linspace(1,298,floor(len+1)+ 3);
n_rfs     = [15 15 15 15 15 15];
time = (0:1:len)';
 index=1;
for i=ID1:ID3
   
    traj=csaps(x,leftMatrix(:,index)',0.9,xx);
    
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len);
    index=index+1;
    T(:,i)=Y(:,1);%501 valori
    
   
    %%%%%%%%%%%%%%per plottare
    traj=traj(1:501)';
    figure;
    clf;
    plot(time,Y(:,1),'b -o',time,traj,'r');
    title('y');
    aa=axis;
    axis([min(time) max(time) aa(3:4)]);
    %%%%%%%%%%%%%%%%%%%%%%
 
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    goal(i)=T(floor(len+1),i);
end






% %rotazioni
% learn_dcp_batch(ID4,leftMatrix(:,4)',name4);
% learn_dcp_batch(ID5,leftMatrix(:,5)',name5);
% learn_dcp_batch(ID6,leftMatrix(:,6)',name6);
 
 index=4;
 for i=ID4:ID6
    traj=csaps(x,leftMatrix(:,index)',0.9,xx);
    
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len);
    index=index+1;
    T(:,i)=Y(:,1);%501 valori
    
   
    %%%%%%%%%%%%%%per plottare
    traj=traj(1:501)';
    figure;
    clf;
    plot(time,Y(:,1),'b -o',time,traj,'r');
    title('y');
    aa=axis;
    axis([min(time) max(time) aa(3:4)]);
    %%%%%%%%%%%%%%%%%%%%%%
 
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    goal(i)=T(floor(len+1),i);
end



%%nao esegue primitiva
% global MOTION
% MOTION.setStiffnesses('Body',1);
% % 
% % 
% timeLists=linspace(1,10,501);
% 
% trajNao = mat2cell(T,ones(1,501),6);
% 
% 
% MOTION.positionInterpolation('LArm',int16(0),trajNao,int16(63),timeLists,true);





%set max e min
% if(any(massimo==1000))
%     massimo(1)=max(leftMatrix(:,1)');
%     massimo(2)=max(leftMatrix(:,2)');
%     massimo(3)=max(leftMatrix(:,3)');
%     massimo(4)=max(leftMatrix(:,4)');
%     massimo(5)=max(leftMatrix(:,5)');
%     massimo(6)=max(leftMatrix(:,6)');
% else
%     if(max(leftMatrix(:,1)')>massimo(1))
%         massimo(1)=max(leftMatrix(:,1)');
%     end
%     if(max(leftMatrix(:,2)')>massimo(2))
%         massimo(2)=max(leftMatrix(:,2)');
%     end
%     if(max(leftMatrix(:,3)')>massimo(3))
%         massimo(3)=max(leftMatrix(:,3)');
%     end
%     if(max(leftMatrix(:,4)')>massimo(4))
%         massimo(4)=max(leftMatrix(:,4)');
%     end
%     
%     if(max(leftMatrix(:,5)')>massimo(5))
%         massimo(5)=max(leftMatrix(:,5)');
%     end
%     
%     if(max(leftMatrix(:,6)')>massimo(6))
%         massimo(6)=max(leftMatrix(:,6)');
%     end
%     
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(leftMatrix(:,1)');
%     minimo(2)=min(leftMatrix(:,2)');
%     minimo(3)=min(leftMatrix(:,3)');
%     minimo(4)=min(leftMatrix(:,4)');
%     minimo(5)=min(leftMatrix(:,5)');
%     minimo(6)=min(leftMatrix(:,6)');
% else
%     if(min(leftMatrix(:,1)')>minimo(1))
%         minimo(1)=min(leftMatrix(:,1)');
%     end
%     if(min(leftMatrix(:,2)')>minimo(2))
%         minimo(2)=min(leftMatrix(:,2)');
%     end
%     if(min(leftMatrix(:,3)')>minimo(3))
%         minimo(3)=min(leftMatrix(:,3)');
%     end
%     if(min(leftMatrix(:,4)')>minimo(4))
%         minimo(4)=min(leftMatrix(:,4)');
%     end
%     
%     if(min(leftMatrix(:,5)')>minimo(5))
%         minimo(5)=min(leftMatrix(:,5)');
%     end
%     
%     if(min(leftMatrix(:,6)')>minimo(6))
%         minimo(6)=min(leftMatrix(:,6)');
%     end
%     
% end


end