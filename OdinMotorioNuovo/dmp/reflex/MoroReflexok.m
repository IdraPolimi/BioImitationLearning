function MoroReflexok(ID1,ID2,ID3,ID4,ID5,ID6)
global dcps;
global massimo
global minimo
T1=[ -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.30983, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.30983, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.30983, -0.31136, -0.31136, -0.30983, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.31136, -0.30983, -0.30983, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30983, -0.30829, -0.30983, -0.30676, -0.30676, -0.30522, -0.30522, -0.30522, -0.30522, -0.30522, -0.30522, -0.30676, -0.30676, -0.30676, -0.30676, -0.30522, -0.30676, -0.30676, -0.30676, -0.30676, -0.30522, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30676, -0.30829, -0.30676, -0.30676, -0.30676, -0.30829, -0.30829, -0.30829, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31136, -0.31289, -0.32056, -0.32977, -0.33437, -0.34971, -0.35585, -0.37425, -0.38499, -0.38806, -0.39266, -0.39420, -0.39420, -0.39420, -0.39420, -0.39420, -0.39420, -0.39420, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266, -0.39266];
T2=[ -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.88993, -1.89146, -1.89146, -1.89146, -1.88993, -1.89146, -1.88993, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89146, -1.89300, -1.89300, -1.89300, -1.89300, -1.89300, -1.89300, -1.89913, -1.89913, -1.89913, -1.89913, -1.89913, -1.89913, -1.90067, -1.90067, -1.90067, -1.90067, -1.90067, -1.90067, -1.90067, -1.90220, -1.90220, -1.90374, -1.90527, -1.90834, -1.91141, -1.91447, -1.91601, -1.92061, -1.92368, -1.92675, -1.92828, -1.93748, -1.94055, -1.95436, -1.95896, -1.97277, -1.98044, -1.98504, -1.99884, -2.00958, -2.02032, -2.02952, -2.03413, -2.04640, -2.05100, -2.06020, -2.06634, -2.06787, -2.06787, -2.06634, -2.05867, -2.05867, -2.06174, -2.06787, -2.07248, -2.07401, -2.08015, -2.08475, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.08567, -2.04793, -2.02952, -1.98044, -1.94822, -1.86692, -1.79329, -1.76107, -1.75494, -1.74113, -1.72119, -1.69204, -1.66136, -1.63682, -1.61228, -1.58466, -1.55859, -1.51257, -1.42206, -1.38064, -1.31775, -1.30394, -1.28707, -1.26559, -1.25332, -1.21190, -1.14901, -1.12293, -1.10299, -1.08611, -1.06310, -1.04316, -1.02169, -1.00788, -0.97720, -0.94499, -0.94499, -0.90357, -0.89130, -0.86982, -0.85908, -0.82687, -0.81306, -0.79159, -0.77164, -0.74557, -0.72716, -0.71182, -0.69955, -0.69341, -0.67960, -0.66426, -0.64892, -0.63819, -0.63052, -0.62131, -0.61671, -0.61057, -0.59063, -0.57529, -0.56302, -0.55228, -0.53848, -0.53848, -0.52774, -0.52160, -0.51240, -0.50933, -0.50626, -0.50473, -0.50013, -0.49859, -0.50013, -0.50013, -0.50013, -0.50013, -0.50013, -0.50013, -0.50166, -0.50166, -0.50166, -0.50166, -0.50166, -0.50166, -0.50166, -0.50166, -0.50166, -0.50319, -0.50626, -0.50933, -0.50933, -0.50933, -0.50933, -0.50780, -0.50780, -0.50626, -0.50780, -0.50626, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50780, -0.50626, -0.50780, -0.50626, -0.50626, -0.50626, -0.50626, -0.50626, -0.50780, -0.50780, -0.50626, -0.50626, -0.50626, -0.50626, -0.50626, -0.50626, -0.50626, -0.50626, -0.50626, -0.50473];
T3=[ 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60299, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60299, 1.60452, 1.60452, 1.60452, 1.60452, 1.60452, 1.60299, 1.60299, 1.60299, 1.60299, 1.60299, 1.60299, 1.60299, 1.60299, 1.60299, 1.60145, 1.59992, 1.59685, 1.59532, 1.59532, 1.59532, 1.59839, 1.60452, 1.61219, 1.61526, 1.61679, 1.61679, 1.61679, 1.61833, 1.61833, 1.61833, 1.61986, 1.62140, 1.62140, 1.62293, 1.62600, 1.63213, 1.63520, 1.63980, 1.64594, 1.64747, 1.64747, 1.64747, 1.64747, 1.64747, 1.64901, 1.64747, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64901, 1.64747, 1.64594, 1.64441, 1.63060, 1.63060, 1.62907, 1.62600, 1.62600, 1.62446, 1.61679, 1.60912, 1.59685, 1.58458, 1.57231, 1.55697, 1.53703, 1.51708, 1.49407, 1.46953, 1.44038, 1.32073, 1.26858, 1.18881, 1.11671, 1.07069, 1.05228, 1.03694, 1.01393, 0.99399, 0.97098, 0.94797, 0.93263, 0.92036, 0.90962, 0.89735, 0.88354, 0.87127, 0.85593, 0.84059, 0.82525, 0.81144, 0.79304, 0.77770, 0.75929, 0.74241, 0.72247, 0.70560, 0.68719, 0.67185, 0.65651, 0.63964, 0.62583, 0.60896, 0.59208, 0.57674, 0.55527, 0.53993, 0.52305, 0.51385, 0.49851, 0.48163, 0.46783, 0.45095, 0.43561, 0.42794, 0.41567, 0.40033, 0.38959, 0.38192, 0.37732, 0.37425, 0.37119, 0.36965, 0.36812, 0.36658, 0.36505, 0.36505, 0.36505, 0.36505, 0.35738, 0.35124, 0.34664, 0.34204, 0.33744, 0.33590, 0.33590, 0.33590, 0.33437, 0.33437, 0.33437, 0.33130, 0.32823, 0.32056, 0.31289, 0.30676, 0.30216, 0.30062, 0.30062, 0.29909, 0.29602, 0.29602, 0.29602, 0.29449, 0.29449, 0.29295, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29602, 0.29449, 0.29449, 0.29449, 0.29449, 0.29449, 0.29295, 0.29295, 0.29295, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29142, 0.29142, 0.28988, 0.28835, 0.28682, 0.28682, 0.28682, 0.28682, 0.28528, 0.28528, 0.28375, 0.28221, 0.28375, 0.28682, 0.28835, 0.28835, 0.28835, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29142, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295, 0.29295];
T4=[ 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26381, 0.26227, 0.26381, 0.26381, 0.26381, 0.26227, 0.26227, 0.26227, 0.26381, 0.26381, 0.26687, 0.26994, 0.27608, 0.28221, 0.28835, 0.29295, 0.30216, 0.30983, 0.31750, 0.32823, 0.33897, 0.34971, 0.36198, 0.37425, 0.38806, 0.40187, 0.41874, 0.44022, 0.46476, 0.49084, 0.51538, 0.53686, 0.56600, 0.57367, 0.58901, 0.60435, 0.61816, 0.62736, 0.63810, 0.65037, 0.66418, 0.68566, 0.70253, 0.72094, 0.73935, 0.75775, 0.77463, 0.78843, 0.80531, 0.82218, 0.83752, 0.85593, 0.87127, 0.88814, 0.90348, 0.92189, 0.93263, 0.95257, 0.96791, 0.98479, 1.00166, 1.02314, 1.04154, 1.06302, 1.08450, 1.10290, 1.11978, 1.13358, 1.14892, 1.16580, 1.18267, 1.19955, 1.21182, 1.21642, 1.22256, 1.22869, 1.23636, 1.23943, 1.24403, 1.24403, 1.24403, 1.24557, 1.24557, 1.24403, 1.24403, 1.24403, 1.24403, 1.24403, 1.24403, 1.24250, 1.23636, 1.22716, 1.21642, 1.21182, 1.21028, 1.20722, 1.20722, 1.20722, 1.20722, 1.20722, 1.20722, 1.20722, 1.20722, 1.20722, 1.20722, 1.20568, 1.20722, 1.20722, 1.20415, 1.20415, 1.20415, 1.19801, 1.19648, 1.19188, 1.18727, 1.18267, 1.17960, 1.17347, 1.16580, 1.15506, 1.14586, 1.13512, 1.12131, 1.10444, 1.08910, 1.07376, 1.06149, 1.04615, 1.03541, 1.02160, 1.01086, 0.99706, 0.98479, 0.96945, 0.96024, 0.94644, 0.93263, 0.91882, 0.90655, 0.89275, 0.88201, 0.87127, 0.86360, 0.85900, 0.85286, 0.85133, 0.85133, 0.84979, 0.84826, 0.84826, 0.84826, 0.84979, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84979, 0.84979, 0.84979, 0.84826, 0.84826, 0.84826, 0.84979, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84979, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84673, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84979, 0.84826, 0.84826, 0.84826, 0.84826, 0.84979, 0.84826, 0.84979, 0.84826, 0.84826, 0.84979, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84979, 0.84826, 0.84826, 0.84826, 0.84979, 0.84979, 0.84826, 0.84979, 0.84826, 0.84826, 0.84826, 0.84826, 0.84673, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826, 0.84826];
% T1=filtfilt(ones(1,10)/10,1,T1);
% T2=filtfilt(ones(1,10)/10,1,T2);
% T3=filtfilt(ones(1,10)/10,1,T3);
% T4=filtfilt(ones(1,10)/10,1,T4);
% name1='MoroLElbowRoll';
% name2='MoroLElbowYaw';
% name3='MoroLShoulderPitch';
% name4='MoroLShoulderRoll';
% learn_dcp_batch(ID1,T1,name1);
% learn_dcp_batch(ID2,T2,name2);
% learn_dcp_batch(ID3,T3,name3);
% learn_dcp_batch(ID4,T4,name4);
% if(any(massimo==1000))
%     massimo(1)=max(T1);
%     massimo(2)=max(T2);
%     massimo(3)=max(T3);
%     massimo(4)=max(T4);
% else
%     if(max(T1)>massimo(1))
%         massimo(1)=max(T1);
%     end
%     if(max(T2)>massimo(2))
%         massimo(2)=max(T2);
%     end
%     if(max(T3)>massimo(3))
%         massimo(3)=max(T3);
%     end
%     if(max(T4)>massimo(4))
%         massimo(4)=max(T4);
%     end
% end
%
% if(any(minimo==1000))
%     minimo(1)=min(T1);
%     minimo(2)=min(T2);
%     minimo(3)=min(T3);
%     minimo(4)=min(T4);
% else
%     if(min(T1)<minimo(1))
%         minimo(1)=min(T1);
%     end
%     if(min(T2)<minimo(2))
%         minimo(2)=min(T2);
%     end
%     if(min(T3)<minimo(3))
%         minimo(3)=min(T3);
%     end
%     if(min(T4)<minimo(4))
%          minimo(4)=min(T4);
%     end
% end

T5=zeros(1,300);
for i=1:300
    leftMatrix(i,:)=fLeftHandH25([T3(i);T4(i);T2(i);T1(i);T5(i)]);end;

name1='MoroX';
name2='MoroY';
name3='MoroZ';
name4='MoroWX';
name5='MoroWY';
name6='MoroWZ';
namesCoords={name1, name2, name3, name4,name5,name6};
%  learn_dcp_batch(ID1,leftMatrix(:,1)',name1);
%  learn_dcp_batch(ID2,leftMatrix(:,2)',name2);
%  learn_dcp_batch(ID3,leftMatrix(:,3)',name3);

tau  = 0.5;
dt  = 0.001;
len=tau/dt;
x=1:300;
xx=linspace(1,300,floor(len+1)+ 3);
n_rfs     = [15 15 15 15 15 15];
time = (0:1:len)';
index=1;
for i=ID1:ID3
    traj=csaps(x,leftMatrix(:,index)',0.9,xx);
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len,namesCoords(index));
    T(:,index)=Y(:,1);%501 valori
    index=index+1;
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    %  goal(i)=T(floor(len+1),i);
    
    %     %%%%%%%%%%%%%%per plottare
    %     traj=traj(1:501)';
    % figure(i)
    %
    %     plot(time,Y(:,1),'b -o',time,traj,'r');
    %     title('y');
    %     aa=axis;
    %     axis([min(time) max(time) aa(3:4)]);
    %     %%%%%%%%%%%%%%%%%%%%%%
    
end

%  learn_dcp_batch(ID4,leftMatrix(:,4)',name4);
%  learn_dcp_batch(ID5,leftMatrix(:,5)',name5);
%  learn_dcp_batch(ID6,leftMatrix(:,6)',name6);

% index=4;
% for i=ID4:ID6
%     traj=csaps(x,leftMatrix(:,index)',0.9,xx);
%     Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len,namesCoords(index));
%     T(:,index)=Y(:,1);%501 valor
%     index=index+1;
%     dcp('reset_state',i, traj(1));
%     dcp('set_goal',i,traj(floor(len+1)),1);
%     %goal(i)=T(floor(len+1),i);
%     %     %%%%%%%%%%%%%%per plottare
%     %     traj=traj(1:501)';
%     % figure(i)
%     %
%     %     plot(time,Y(:,1),'b -o',time,traj,'r');
%     %     title('y');
%     %     aa=axis;
%     %     axis([min(time) max(time) aa(3:4)]);
%     %     %%%%%%%%%%%%%%%%%%%%%%
%     
%     
% end
%   figure(13)
%   plot3(T(:,1),T(:,2),T(:,3),'-')
%   axis equal
%   
  %%nao esegue primitiva
% global MOTION
% MOTION.setStiffnesses('Body',1);
% % 
% % 
% timeLists=linspace(1,10,501);
% 
% trajNao = mat2cell(T,ones(1,501),6);
% 
% 
% MOTION.positionInterpolation('LArm',int16(0),trajNao,int16(63),timeLists,true);


%  if(any(massimo==1000))
%     massimo(1)=max(leftMatrix(:,1)');
%     massimo(2)=max(leftMatrix(:,2)');
%     massimo(3)=max(leftMatrix(:,3)');
%     massimo(4)=max(leftMatrix(:,4)');
%     massimo(5)=max(leftMatrix(:,5)');
%     massimo(6)=max(leftMatrix(:,6)');
% else
%     if(max(leftMatrix(:,1)')>massimo(1))
%         massimo(1)=max(leftMatrix(:,1)');
%     end
%     if(max(leftMatrix(:,2)')>massimo(2))
%         massimo(2)=max(leftMatrix(:,2)');
%     end
%     if(max(leftMatrix(:,3)')>massimo(3))
%         massimo(3)=max(leftMatrix(:,3)');
%     end
%     if(max(leftMatrix(:,4)')>massimo(4))
%         massimo(4)=max(leftMatrix(:,4)');
%     end
%
%     if(max(leftMatrix(:,5)')>massimo(5))
%         massimo(5)=max(leftMatrix(:,5)');
%     end
%
%     if(max(leftMatrix(:,6)')>massimo(6))
%         massimo(6)=max(leftMatrix(:,6)');
%     end
%
% end
%
% if(any(minimo==1000))
%     minimo(1)=min(leftMatrix(:,1)');
%     minimo(2)=min(leftMatrix(:,2)');
%     minimo(3)=min(leftMatrix(:,3)');
%     minimo(4)=min(leftMatrix(:,4)');
%     minimo(5)=min(leftMatrix(:,5)');
%     minimo(6)=min(leftMatrix(:,6)');
% else
%     if(min(leftMatrix(:,1)')>minimo(1))
%         minimo(1)=min(leftMatrix(:,1)');
%     end
%     if(min(leftMatrix(:,2)')>minimo(2))
%         minimo(2)=min(leftMatrix(:,2)');
%     end
%     if(min(leftMatrix(:,3)')>minimo(3))
%         minimo(3)=min(leftMatrix(:,3)');
%     end
%     if(min(leftMatrix(:,4)')>minimo(4))
%         minimo(4)=min(leftMatrix(:,4)');
%     end
%
%     if(min(leftMatrix(:,5)')>minimo(5))
%         minimo(5)=min(leftMatrix(:,5)');
%     end
%
%     if(min(leftMatrix(:,6)')>minimo(6))
%         minimo(6)=min(leftMatrix(:,6)');
%     end
%
% end

end