function SwimmingReflex2(ID1,ID2,ID3,ID4,ID5,ID6)
global dcps;
global massimo
global minimo
T1=[ -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28835, -0.28988, -0.28988, -0.28988, -0.28988, -0.28835, -0.28988, -0.28835, -0.28988, -0.28835, -0.28988, -0.28835, -0.28835, -0.28988, -0.28835, -0.28988, -0.28988, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28988, -0.28988, -0.28835, -0.28835, -0.28988, -0.28835, -0.28988, -0.28835, -0.28835, -0.28988, -0.28988, -0.28835, -0.28835, -0.28988, -0.28835, -0.28988, -0.28835, -0.28835, -0.28988, -0.28988, -0.28988, -0.28835, -0.28988, -0.28988, -0.28988, -0.28835, -0.28835, -0.28835, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28835, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28988, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28988, -0.28835, -0.28835, -0.28835, -0.28988, -0.28835, -0.28988, -0.28835, -0.28835, -0.28988, -0.28835, -0.28835, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28988, -0.28835, -0.28988, -0.28835, -0.28988, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28835, -0.28682, -0.28682, -0.28835, -0.28835, -0.28682, -0.28835, -0.28682, -0.28682, -0.28682, -0.28682, -0.28682, -0.28682, -0.28682, -0.28682, -0.28682, -0.28682, -0.28682, -0.28528, -0.28528, -0.28375, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761, -0.27761];
T2=[ 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02604, 0.02450, 0.02450, 0.02604, 0.02450, 0.02604, 0.02450, 0.02450, 0.02450, 0.02450, 0.02450, 0.02297, 0.02450, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02297, 0.02143, 0.02143, 0.01990, 0.01837, 0.01683, 0.01683, 0.01530, 0.01376, 0.01376, 0.01070, 0.00763, 0.00303, -0.00311, -0.01078, -0.01845, -0.02612, -0.03379, -0.03839, -0.04299, -0.04913, -0.05680, -0.06600, -0.07367, -0.08134, -0.09208, -0.10435, -0.11663, -0.12890, -0.14117, -0.15191, -0.16265, -0.17185, -0.18105, -0.18719, -0.19179, -0.19793, -0.20713, -0.21787, -0.23014, -0.24395, -0.25162, -0.25469, -0.25622, -0.25469, -0.25315, -0.25469, -0.25315, -0.25469, -0.25469, -0.25469, -0.25469, -0.25469, -0.25622, -0.25622, -0.25622, -0.25622, -0.25775, -0.25775, -0.25775, -0.25622, -0.25622, -0.25775, -0.26082, -0.26236, -0.26389, -0.26696, -0.27156, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27463, -0.27463, -0.27463, -0.27309, -0.27463, -0.27463, -0.27463, -0.27463, -0.27309, -0.27463, -0.27616, -0.27616, -0.27616, -0.27616, -0.27770, -0.27770, -0.27770, -0.27770, -0.27770, -0.27770, -0.27770, -0.27770, -0.27923, -0.27770, -0.27923, -0.27923, -0.27770, -0.27770, -0.27923, -0.27923, -0.27923, -0.27923, -0.27923, -0.27923, -0.28076, -0.27923, -0.27923, -0.27463, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.27309, -0.26236, -0.26236, -0.25008, -0.24702, -0.23781, -0.22861, -0.22247, -0.21787, -0.21173, -0.20406, -0.19793, -0.19179, -0.18566, -0.17492, -0.16418, -0.15037, -0.13810, -0.12276, -0.10896, -0.09668, -0.08441, -0.07367, -0.06600, -0.05527, -0.04453, -0.03379, -0.02612, -0.01231, -0.00925, -0.00158, 0.00609, 0.01530, 0.02297, 0.03217, 0.04138, 0.04751, 0.05518, 0.06439, 0.07359, 0.07819, 0.08433, 0.09046, 0.09507, 0.09660, 0.09967, 0.09967, 0.09967, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.09967, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.10120, 0.09967, 0.10120, 0.10120];
T3=[ 1.43885, 1.44038, 1.44038, 1.44345, 1.44345, 1.44652, 1.44959, 1.45112, 1.45572, 1.46186, 1.46800, 1.47413, 1.47873, 1.48487, 1.49101, 1.49714, 1.50328, 1.50941, 1.51555, 1.52322, 1.53242, 1.54316, 1.55390, 1.56771, 1.58305, 1.59532, 1.61066, 1.63060, 1.66435, 1.68122, 1.70423, 1.72878, 1.75025, 1.76559, 1.78553, 1.80394, 1.82542, 1.84536, 1.86223, 1.88064, 1.89905, 1.91592, 1.93126, 1.95427, 1.97268, 1.99262, 2.00950, 2.02637, 2.04018, 2.05398, 2.06779, 2.08313, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.08567, 2.07393, 2.04171, 2.00950, 1.97882, 1.87911, 1.79167, 1.74105, 1.71804, 1.70577, 1.68582, 1.66742, 1.64747, 1.62600, 1.59992, 1.56771, 1.53703, 1.51402, 1.48487, 1.44959, 1.41891, 1.38823, 1.31613, 1.22562, 1.16580, 1.11978, 1.09370, 1.08756, 1.07222, 1.04921, 1.01240, 0.94183, 0.83445, 0.76236, 0.70867, 0.67952, 0.66878, 0.65804, 0.63964, 0.61509, 0.57674, 0.54760, 0.51385, 0.48624, 0.45709, 0.40033, 0.31750, 0.23619, 0.18864, 0.17790, 0.17023, 0.16103, 0.14569, 0.12728, 0.08279, -0.00311, -0.07367, -0.11049, -0.11509, -0.12583, -0.14117, -0.15958, -0.18412, -0.21020, -0.24548, -0.33752, -0.41576, -0.45564, -0.46791, -0.47405, -0.48325, -0.49552, -0.50473, -0.51393, -0.52007, -0.52160, -0.52160, -0.52160, -0.52160, -0.52160, -0.52160, -0.52160, -0.52007, -0.51240, -0.50166, -0.49706, -0.48018, -0.47251, -0.45717, -0.44030, -0.41422, -0.39581, -0.37434, -0.35440, -0.33139, -0.31451, -0.29457, -0.27309, -0.24855, -0.23014, -0.20867, -0.18719, -0.16571, -0.14731, -0.12430, -0.10435, -0.08595, -0.06907, -0.05373, -0.03839, -0.02459, -0.00158, 0.00609, 0.02143, 0.03524, 0.05058, 0.06745, 0.08279, 0.09967, 0.11194, 0.12728, 0.14569, 0.16103, 0.17790, 0.19478, 0.21472, 0.23159, 0.24386, 0.25460, 0.25920, 0.26074, 0.26227, 0.26227, 0.26381, 0.26381, 0.26227, 0.26381, 0.26227, 0.26227, 0.26227, 0.26227, 0.26227, 0.26227, 0.26227, 0.26074, 0.26074, 0.26074, 0.26074, 0.26074, 0.26074, 0.25767, 0.25000];
T4=[ 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43255, 0.43408, 0.43408, 0.43408, 0.43408, 0.43408, 0.43561, 0.43561, 0.43561, 0.43561, 0.43561, 0.43561, 0.43561, 0.43715, 0.43715, 0.43868, 0.43868, 0.43715, 0.43868, 0.43868, 0.43868, 0.43868, 0.43868, 0.43868, 0.43868, 0.43868, 0.43868, 0.43868, 0.43868, 0.44022, 0.44022, 0.44175, 0.44328, 0.44942, 0.45249, 0.46323, 0.47090, 0.48010, 0.48163, 0.48470, 0.49237, 0.50004, 0.51231, 0.52305, 0.53686, 0.55220, 0.57061, 0.59055, 0.60896, 0.62736, 0.64270, 0.66111, 0.67645, 0.68872, 0.70713, 0.72401, 0.74395, 0.76542, 0.78690, 0.81298, 0.83906, 0.86667, 0.89428, 0.92189, 0.94644, 0.96945, 0.99092, 1.01393, 1.03541, 1.05688, 1.07683, 1.09523, 1.11364, 1.13052, 1.14586, 1.16120, 1.17500, 1.18727, 1.19801, 1.21028, 1.21949, 1.23023, 1.23790, 1.24710, 1.25170, 1.25630, 1.25784, 1.25937, 1.26091, 1.25937, 1.25937, 1.25937, 1.25937, 1.25937, 1.25937, 1.25937, 1.25937, 1.25784, 1.25784, 1.25784, 1.25784, 1.25784, 1.25784, 1.25937, 1.25937, 1.25937, 1.25937, 1.25937, 1.26091, 1.27011, 1.28392, 1.30079, 1.31306, 1.31613, 1.31613, 1.31613, 1.31613, 1.31766, 1.31920, 1.31920, 1.31920, 1.31920, 1.32073, 1.31920, 1.32073, 1.31920, 1.31920, 1.31920, 1.32073, 1.32073, 1.32073, 1.32073, 1.31920, 1.31766, 1.31766, 1.31766, 1.31766, 1.31766, 1.31766, 1.31766, 1.31766, 1.31613, 1.31460, 1.31306, 1.31153, 1.30386, 1.29312, 1.28238, 1.27931, 1.27778, 1.27625, 1.27625, 1.27318, 1.26858, 1.25937, 1.24403, 1.22562, 1.21335, 1.20875, 1.20568, 1.20415, 1.20261, 1.20108, 1.19648, 1.19188, 1.17807, 1.15506, 1.14432, 1.13358, 1.12285, 1.10904, 1.09370, 1.07683, 1.05688, 1.03694, 1.01393, 0.98939, 0.96331, 0.93723, 0.90809, 0.87894, 0.84979, 0.81605, 0.78843, 0.75162, 0.73628, 0.70406, 0.69179, 0.66878, 0.64577, 0.61663, 0.59822, 0.57828, 0.55833, 0.54146, 0.53379, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52612, 0.52765, 0.52765, 0.52765, 0.52765, 0.52765, 0.52765, 0.52765, 0.52765, 0.53072, 0.53226, 0.53226, 0.53379, 0.53379, 0.53379, 0.53379, 0.53379, 0.53532, 0.53532, 0.53379, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532, 0.53532];
%plot(1:size(T1),T1)
% size(T1)
% size(T2)
% size(T3)
% size(T4)
% name1='SWIM2LElbowRoll';
% name2='SWIM2LElbowYaw';
% name3='SWIM2LShoulderPitch';
% name4='SWIM2LShoulderRoll';
% learn_dcp_batch(ID1,T1,name1);
% learn_dcp_batch(ID2,T2,name2);
% learn_dcp_batch(ID3,T3,name3);
% learn_dcp_batch(ID4,T4,name4);
% if(any(massimo==1000))
%     massimo(1)=max(T1);
%     massimo(2)=max(T2);
%     massimo(3)=max(T3);
%     massimo(4)=max(T4);
% else
%     if(max(T1)>massimo(1))
%         massimo(1)=max(T1);
%     end
%     if(max(T2)>massimo(2))
%         massimo(2)=max(T2);
%     end
%     if(max(T3)>massimo(3))
%         massimo(3)=max(T3);
%     end
%     if(max(T4)>massimo(4))
%         massimo(4)=max(T4);
%     end
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(T1);
%     minimo(2)=min(T2);
%     minimo(3)=min(T3);
%     minimo(4)=min(T4);
% else
%     if(min(T1)<minimo(1))
%         minimo(1)=min(T1);
%     end
%     if(min(T2)<minimo(2))
%         minimo(2)=min(T2);
%     end
%     if(min(T3)<minimo(3))
%         minimo(3)=min(T3);
%     end
%     if(min(T4)<minimo(4))
%          minimo(4)=min(T4);
%     end
% end


for i=1:272
leftMatrix(i,:)=fLeftHand([T3(i);T4(i);T2(i);T1(i)]);end;

name1='Swimming2X';
 name2='Swimming2Y';
 name3='Swimming2Z';
 name4='Swimming2WX';
 name5='Swimming2WY';
 name6='Swimming2WZ';
%  learn_dcp_batch(ID1,leftMatrix(:,1)',name1);
%  learn_dcp_batch(ID2,leftMatrix(:,2)',name2);
%  learn_dcp_batch(ID3,leftMatrix(:,3)',name3);

tau  = 0.5;
dt  = 0.001;
len=tau/dt;
x=1:272;
xx=linspace(1,272,floor(len+1)+ 3);
n_rfs     = [15 15 15 15 15 15];
time = (0:1:len)';
for i=ID1:ID3
    traj=csaps(x,leftMatrix(:,i)',0.9,xx);
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(i),0,traj,0,len);
    T(:,i)=Y(:,1);%501 valori
    
   
    %%%%%%%%%%%%%%per plottare
    traj=traj(1:501)';
    figure;
    clf;
    plot(time,Y(:,1),'b -o',time,traj,'r');
    title('y');
    aa=axis;
    axis([min(time) max(time) aa(3:4)]);
    %%%%%%%%%%%%%%%%%%%%%%
 
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    goal(i)=T(floor(len+1),i);
end

%  learn_dcp_batch(ID4,leftMatrix(:,4)',name4);
%  learn_dcp_batch(ID5,leftMatrix(:,5)',name5);
%  learn_dcp_batch(ID6,leftMatrix(:,6)',name6);

for i=ID4:ID6
    traj=csaps(x,leftMatrix(:,i)',0.9,xx);
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(i),0,traj,0,len);
    T(:,i)=Y(:,1);%501 valori
    
   
    %%%%%%%%%%%%%%per plottare
    traj=traj(1:501)';
    figure;
    clf;
    plot(time,Y(:,1),'b -o',time,traj,'r');
    title('y');
    aa=axis;
    axis([min(time) max(time) aa(3:4)]);
    %%%%%%%%%%%%%%%%%%%%%%
 
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    goal(i)=T(floor(len+1),i);
end
 
 
%  if(any(massimo==1000))
%     massimo(1)=max(leftMatrix(:,1)');
%     massimo(2)=max(leftMatrix(:,2)');
%     massimo(3)=max(leftMatrix(:,3)');
%     massimo(4)=max(leftMatrix(:,4)');
%     massimo(5)=max(leftMatrix(:,5)');
%     massimo(6)=max(leftMatrix(:,6)');
% else
%     if(max(leftMatrix(:,1)')>massimo(1))
%         massimo(1)=max(leftMatrix(:,1)');
%     end
%     if(max(leftMatrix(:,2)')>massimo(2))
%         massimo(2)=max(leftMatrix(:,2)');
%     end
%     if(max(leftMatrix(:,3)')>massimo(3))
%         massimo(3)=max(leftMatrix(:,3)');
%     end
%     if(max(leftMatrix(:,4)')>massimo(4))
%         massimo(4)=max(leftMatrix(:,4)');
%     end
%     
%     if(max(leftMatrix(:,5)')>massimo(5))
%         massimo(5)=max(leftMatrix(:,5)');
%     end
%     
%     if(max(leftMatrix(:,6)')>massimo(6))
%         massimo(6)=max(leftMatrix(:,6)');
%     end
%     
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(leftMatrix(:,1)');
%     minimo(2)=min(leftMatrix(:,2)');
%     minimo(3)=min(leftMatrix(:,3)');
%     minimo(4)=min(leftMatrix(:,4)');
%     minimo(5)=min(leftMatrix(:,5)');
%     minimo(6)=min(leftMatrix(:,6)');
% else
%     if(min(leftMatrix(:,1)')>minimo(1))
%         minimo(1)=min(leftMatrix(:,1)');
%     end
%     if(min(leftMatrix(:,2)')>minimo(2))
%         minimo(2)=min(leftMatrix(:,2)');
%     end
%     if(min(leftMatrix(:,3)')>minimo(3))
%         minimo(3)=min(leftMatrix(:,3)');
%     end
%     if(min(leftMatrix(:,4)')>minimo(4))
%         minimo(4)=min(leftMatrix(:,4)');
%     end
%     
%     if(min(leftMatrix(:,5)')>minimo(5))
%         minimo(5)=min(leftMatrix(:,5)');
%     end
%     
%     if(min(leftMatrix(:,6)')>minimo(6))
%         minimo(6)=min(leftMatrix(:,6)');
%     end
%     
% end



end