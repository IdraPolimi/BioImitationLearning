function RotazioneReflex2ok(ID1,ID2,ID3,ID4,ID5,ID6)

global dcps;
global massimo
global minimo
T1=[ -0.87587, -0.87434, -0.87587, -0.87587, -0.87587, -0.87434, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87587, -0.87587, -0.87587, -0.87587, -0.87434, -0.87434, -0.87587, -0.87587, -0.87434, -0.87587, -0.87434, -0.87587, -0.87434, -0.87587, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87587, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87434, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.87280, -0.86667, -0.85133, -0.84366, -0.84366, -0.84366, -0.84366, -0.84366, -0.84366, -0.83906, -0.83599, -0.83445, -0.83445, -0.83292, -0.82832, -0.82218, -0.81605, -0.81298, -0.80684, -0.80531, -0.80684, -0.80224, -0.79610, -0.79150, -0.78537, -0.77770, -0.77003, -0.76389, -0.75315, -0.74855, -0.74855, -0.74855, -0.74702, -0.74548, -0.74395, -0.74395, -0.74395, -0.74088, -0.72861, -0.70867, -0.69486, -0.68259, -0.66878, -0.65804, -0.64731, -0.63657, -0.62736, -0.61969, -0.61202, -0.60589, -0.59975, -0.59362, -0.58441, -0.57674, -0.57214, -0.56600, -0.55987, -0.55680, -0.55066, -0.54606, -0.53993, -0.53226, -0.52152, -0.50925, -0.49851, -0.48930, -0.48317, -0.47703, -0.47090, -0.46476, -0.45556, -0.44635, -0.43715, -0.42334, -0.41874, -0.40647, -0.40187, -0.39573, -0.38653, -0.37425, -0.36045, -0.35124, -0.33590, -0.32977, -0.32363, -0.31903, -0.31750, -0.31750, -0.31750, -0.31289, -0.30676, -0.30216, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.30062, -0.29909, -0.30062, -0.30062, -0.30062, -0.29909, -0.30062, -0.29909, -0.29909, -0.29755, -0.29909, -0.29755, -0.29755, -0.29449, -0.28835, -0.28068, -0.27608, -0.26994, -0.26381, -0.25767, -0.25307, -0.25307, -0.25307, -0.25153, -0.25153, -0.25153, -0.25153, -0.24693, -0.23926, -0.23619, -0.23159, -0.22852, -0.22392, -0.22392, -0.22239, -0.22239, -0.22239, -0.22239, -0.22392, -0.22239, -0.22392, -0.22392, -0.22392, -0.22392, -0.22239, -0.22239, -0.22392, -0.22239, -0.22239, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546, -0.22546];
T2=[ -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04163, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.04009, -1.03856, -1.04009, -1.04009, -1.03856, -1.03856, -1.03856, -1.03703, -1.03856, -1.03856, -1.03703, -1.03856, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03703, -1.03549, -1.03549, -1.03549, -1.03396, -1.02936, -1.02629, -1.02629, -1.02629, -1.02475, -1.02475, -1.02169, -1.02015, -1.01708, -1.01095, -1.00635, -0.99714, -0.98334, -0.96339, -0.94192, -0.92811, -0.90510, -0.88516, -0.86522, -0.84834, -0.82994, -0.80693, -0.78852, -0.77625, -0.76244, -0.74710, -0.73023, -0.71642, -0.70261, -0.68881, -0.67654, -0.66733, -0.65966, -0.65813, -0.65813, -0.65659, -0.65506, -0.65199, -0.65046, -0.64892, -0.64586, -0.63972, -0.63358, -0.62438, -0.60904, -0.60290, -0.59063, -0.57683, -0.56455, -0.55075, -0.54154, -0.52774, -0.51240, -0.49859, -0.47712, -0.46024, -0.44644, -0.43110, -0.41422, -0.39581, -0.37741, -0.36053, -0.32372, -0.23168, -0.15191, -0.10282, -0.10129, -0.09822, -0.09515, -0.09208, -0.08441, -0.07674, -0.06754, -0.05987, -0.04913, -0.03839, -0.02765, -0.01692, -0.00464, 0.00916, 0.02143, 0.03524, 0.05058, 0.06745, 0.08126, 0.09660, 0.10580, 0.11347, 0.12881, 0.14262, 0.15796, 0.17023, 0.17944, 0.18557, 0.19324, 0.19938, 0.20398, 0.21012, 0.21625, 0.22085, 0.22546, 0.23159, 0.23619, 0.23926, 0.24386, 0.24847, 0.25000, 0.25153, 0.25614, 0.25920, 0.26381, 0.26841, 0.27608, 0.28221, 0.29295, 0.30369, 0.31596, 0.32670, 0.33590, 0.34357, 0.35431, 0.36198, 0.36965, 0.38039, 0.38959, 0.39573, 0.40493, 0.41260, 0.41721, 0.42334, 0.42948, 0.43408, 0.44482, 0.45402, 0.45862, 0.47243, 0.47550, 0.48317, 0.48930, 0.49544, 0.50464, 0.50925, 0.51845, 0.52305, 0.52765, 0.53379, 0.54299, 0.55373, 0.56907, 0.58441, 0.60896, 0.63810, 0.66111, 0.67799, 0.70100, 0.72707, 0.75008, 0.77309, 0.79150, 0.81298, 0.83292, 0.84059, 0.84519, 0.85440, 0.86360, 0.87587, 0.88814, 0.90195, 0.91422, 0.92343, 0.93110, 0.93723, 0.94644, 0.95564, 0.96638, 0.97712, 0.98785, 1.00013, 1.01086, 1.02007, 1.03234, 1.04768, 1.06149, 1.07529, 1.08603, 1.09523, 1.10290, 1.11211, 1.12438, 1.14125, 1.15353, 1.16426, 1.17193, 1.18114, 1.18881, 1.19801, 1.20875, 1.22102, 1.23023, 1.23943, 1.24710, 1.25324, 1.25937, 1.26704, 1.27778, 1.29005, 1.30232, 1.31306, 1.32227, 1.32994, 1.33914, 1.34067, 1.34067, 1.33914, 1.34067, 1.34067, 1.33914, 1.33914, 1.34067, 1.34067, 1.34067, 1.34067, 1.34067, 1.34067, 1.34067, 1.34067, 1.34067, 1.34067, 1.34221, 1.34067, 1.34221, 1.34221, 1.34374, 1.34528, 1.34681, 1.34834, 1.34988, 1.35141, 1.35448, 1.35448, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35448, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601, 1.35601];
% T3=[ 0 0 0];
% T4=[0 0 0];
T3=zeros(1,350);
T4=zeros(1,350);
%plot(1:size(T1),T1)
% size(T1)
% size(T2)
% size(T3)
% size(T4)
% name1='Rot2LElbowRoll';
% name2='Rot2LElbowYaw';
% name3='Rot2LShoulderPitch';
% name4='Rot2LShoulderRoll';
% learn_dcp_batch(ID1,T1,name1);
% learn_dcp_batch(ID2,T2,name2);
% learn_dcp_batch(ID3,T3,name3);
% learn_dcp_batch(ID4,T4,name4);
% if(any(massimo==1000))
%     massimo(1)=max(T1);
%     massimo(2)=max(T2);
%     massimo(3)=max(T3);
%     massimo(4)=max(T4);
% else
%     if(max(T1)>massimo(1))
%         massimo(1)=max(T1);
%     end
%     if(max(T2)>massimo(2))
%         massimo(2)=max(T2);
%     end
%     if(max(T3)>massimo(3))
%         massimo(3)=max(T3);
%     end
%     if(max(T4)>massimo(4))
%         massimo(4)=max(T4);
%     end
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(T1);
%     minimo(2)=min(T2);
%     minimo(3)=min(T3);
%     minimo(4)=min(T4);
% else
%     if(min(T1)<minimo(1))
%         minimo(1)=min(T1);
%     end
%     if(min(T2)<minimo(2))
%         minimo(2)=min(T2);
%     end
%     if(min(T3)<minimo(3))
%         minimo(3)=min(T3);
%     end
%     if(min(T4)<minimo(4))
%          minimo(4)=min(T4);
%     end
% end

T5=zeros(1,300);
for i=1:300
leftMatrix(i,:)=fLeftHandH25([T3(i);T4(i);T2(i);T1(i);T5(i)]);end;

name1='Rotazione2X';
 name2='Rotazione2Y';
 name3='Rotazione2Z';
 name4='Rotazione2WX';
 name5='Rotazione2WY';
 name6='Rotazione2WZ';
namesCoords={name1, name2, name3, name4,name5,name6};
%  learn_dcp_batch(ID1,leftMatrix(:,1)',name1);
%  learn_dcp_batch(ID2,leftMatrix(:,2)',name2);
%  learn_dcp_batch(ID3,leftMatrix(:,3)',name3);

tau  = 0.5;
dt  = 0.001;
len=tau/dt;
x=1:300;
xx=linspace(1,300,floor(len+1)+ 3);
n_rfs     = [15 15 15 15 15 15];
time = (0:1:len)';
index=1;
for i=ID1:ID3
    traj=csaps(x,leftMatrix(:,index)',0.9,xx);
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len,namesCoords(index));
    T(:,index)=Y(:,1);%501 valori
    index=index+1;
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    %   goal(i)=T(floor(len+1),i);
    %     %%%%%%%%%%%%%%per plottare
    %     traj=traj(1:501)';
    % figure(i)
    %
    %     plot(time,Y(:,1),'b -o',time,traj,'r');
    %     title('y');
    %     aa=axis;
    %     axis([min(time) max(time) aa(3:4)]);
    %     %%%%%%%%%%%%%%%%%%%%%%
end

%  learn_dcp_batch(ID4,leftMatrix(:,4)',name4);
%  learn_dcp_batch(ID5,leftMatrix(:,5)',name5);
%  learn_dcp_batch(ID6,leftMatrix(:,6)',name6);
% 
% index=4;
% for i=ID4:ID6
%     traj=csaps(x,leftMatrix(:,index)',0.9,xx);
%     Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len,namesCoords(index));
%     T(:,index)=Y(:,1);%501 valori
%     index=index+1;
%     dcp('reset_state',i, traj(1));
%     dcp('set_goal',i,traj(floor(len+1)),1);
%     %  goal(i)=T(floor(len+1),i);
%     %     %%%%%%%%%%%%%%per plottare
%     %     traj=traj(1:501)';
%     % figure(i)
%     %
%     %     plot(time,Y(:,1),'b -o',time,traj,'r');
%     %     title('y');
%     %     aa=axis;
%     %     axis([min(time) max(time) aa(3:4)]);
%     %     %%%%%%%%%%%%%%%%%%%%%%
% end
%  
%  
%  if(any(massimo==1000))
%     massimo(1)=max(leftMatrix(:,1)');
%     massimo(2)=max(leftMatrix(:,2)');
%     massimo(3)=max(leftMatrix(:,3)');
%     massimo(4)=max(leftMatrix(:,4)');
%     massimo(5)=max(leftMatrix(:,5)');
%     massimo(6)=max(leftMatrix(:,6)');
% else
%     if(max(leftMatrix(:,1)')>massimo(1))
%         massimo(1)=max(leftMatrix(:,1)');
%     end
%     if(max(leftMatrix(:,2)')>massimo(2))
%         massimo(2)=max(leftMatrix(:,2)');
%     end
%     if(max(leftMatrix(:,3)')>massimo(3))
%         massimo(3)=max(leftMatrix(:,3)');
%     end
%     if(max(leftMatrix(:,4)')>massimo(4))
%         massimo(4)=max(leftMatrix(:,4)');
%     end
%     
%     if(max(leftMatrix(:,5)')>massimo(5))
%         massimo(5)=max(leftMatrix(:,5)');
%     end
%     
%     if(max(leftMatrix(:,6)')>massimo(6))
%         massimo(6)=max(leftMatrix(:,6)');
%     end
%     
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(leftMatrix(:,1)');
%     minimo(2)=min(leftMatrix(:,2)');
%     minimo(3)=min(leftMatrix(:,3)');
%     minimo(4)=min(leftMatrix(:,4)');
%     minimo(5)=min(leftMatrix(:,5)');
%     minimo(6)=min(leftMatrix(:,6)');
% else
%     if(min(leftMatrix(:,1)')>minimo(1))
%         minimo(1)=min(leftMatrix(:,1)');
%     end
%     if(min(leftMatrix(:,2)')>minimo(2))
%         minimo(2)=min(leftMatrix(:,2)');
%     end
%     if(min(leftMatrix(:,3)')>minimo(3))
%         minimo(3)=min(leftMatrix(:,3)');
%     end
%     if(min(leftMatrix(:,4)')>minimo(4))
%         minimo(4)=min(leftMatrix(:,4)');
%     end
%     
%     if(min(leftMatrix(:,5)')>minimo(5))
%         minimo(5)=min(leftMatrix(:,5)');
%     end
%     
%     if(min(leftMatrix(:,6)')>minimo(6))
%         minimo(6)=min(leftMatrix(:,6)');
%     end
%     
% end


end