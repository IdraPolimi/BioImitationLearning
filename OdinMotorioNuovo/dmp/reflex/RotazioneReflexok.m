function RotazioneReflexok(ID1,ID2,ID3,ID4,ID5,ID6)
global dcps;
global massimo
global minimo
T1=[ -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.40033, -0.39880, -0.39880, -0.40033, -0.39880, -0.40033, -0.39880, -0.40033, -0.40033, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39880, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39726, -0.39573, -0.39726, -0.39573, -0.39726, -0.39573, -0.39573, -0.39573, -0.39573, -0.39420, -0.39113, -0.39113, -0.39113, -0.39113, -0.39113, -0.39113, -0.39113, -0.38959, -0.37886, -0.36812, -0.35585, -0.32823, -0.29449, -0.28221, -0.28221, -0.28221, -0.28221, -0.28221, -0.28221, -0.28221, -0.28221, -0.28221, -0.28221, -0.28068, -0.28221, -0.28068, -0.28068, -0.28221, -0.28221, -0.28221, -0.28221, -0.28221, -0.28068, -0.28221, -0.28068, -0.28221, -0.28068, -0.28221, -0.28068, -0.28068, -0.28068, -0.28068, -0.28221, -0.28068, -0.28068, -0.28221, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28221, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.28068, -0.27761, -0.27454, -0.26227, -0.25614, -0.25153, -0.24693, -0.24233, -0.23773, -0.23466, -0.23006, -0.22546, -0.22392, -0.22239, -0.22392, -0.22239, -0.22392, -0.22392, -0.22239, -0.22392, -0.22239, -0.22239, -0.22392, -0.22392, -0.22392, -0.22392, -0.22239, -0.22392, -0.22392, -0.22239, -0.22239, -0.22392, -0.22239, -0.22392, -0.22392, -0.22392, -0.22392, -0.22239, -0.22239, -0.22239, -0.22239, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22239, -0.22239, -0.22392, -0.22392, -0.22239, -0.22239, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22392, -0.22546, -0.22546, -0.22546, -0.23006, -0.23159, -0.23159, -0.23466, -0.23466, -0.24386, -0.24386, -0.25000, -0.25307, -0.25307, -0.25307, -0.25307, -0.26074, -0.26074, -0.26074, -0.26074, -0.25920, -0.26074, -0.26074, -0.26074, -0.26074, -0.26074, -0.26074, -0.26074, -0.25920, -0.26074, -0.25920, -0.25920, -0.25920, -0.26074, -0.25920, -0.25920, -0.25767, -0.25460, -0.25460, -0.25614, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25614, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460, -0.25460];
T2=[ -1.46348, -1.46348, -1.46501, -1.46348, -1.46348, -1.46501, -1.46348, -1.46501, -1.46501, -1.46808, -1.46808, -1.46961, -1.46808, -1.46961, -1.46961, -1.46961, -1.46961, -1.46808, -1.46961, -1.46808, -1.46808, -1.46961, -1.46961, -1.46808, -1.46808, -1.46808, -1.46808, -1.46808, -1.46961, -1.46808, -1.46808, -1.46808, -1.46961, -1.46808, -1.46808, -1.46808, -1.46808, -1.46808, -1.46961, -1.46808, -1.46808, -1.46808, -1.46655, -1.46501, -1.46501, -1.46501, -1.46501, -1.46348, -1.46501, -1.46348, -1.46348, -1.46348, -1.46348, -1.46348, -1.46348, -1.46348, -1.46194, -1.46194, -1.46348, -1.46194, -1.46348, -1.46194, -1.46194, -1.46194, -1.46194, -1.45888, -1.45581, -1.45274, -1.44660, -1.43587, -1.42513, -1.41439, -1.40212, -1.38831, -1.37604, -1.36070, -1.34689, -1.33155, -1.30548, -1.29781, -1.28247, -1.26559, -1.25332, -1.23645, -1.21957, -1.20270, -1.18736, -1.17509, -1.16281, -1.15054, -1.13674, -1.12140, -1.10759, -1.09378, -1.08151, -1.06617, -1.04930, -1.03396, -1.02015, -1.00635, -0.99254, -0.97567, -0.95726, -0.94192, -0.92965, -0.90817, -0.88823, -0.86982, -0.85448, -0.83761, -0.81460, -0.79465, -0.78085, -0.76551, -0.74710, -0.71642, -0.70722, -0.69034, -0.66887, -0.64739, -0.62438, -0.60751, -0.58910, -0.56916, -0.54921, -0.52620, -0.50780, -0.48939, -0.47251, -0.45717, -0.44490, -0.42496, -0.40502, -0.38661, -0.36360, -0.34366, -0.31605, -0.29457, -0.27463, -0.25008, -0.23168, -0.21020, -0.18719, -0.16265, -0.13043, -0.10742, -0.05833, 0.02757, 0.09660, 0.11654, 0.11654, 0.11808, 0.12268, 0.13188, 0.14262, 0.15336, 0.16563, 0.17637, 0.18557, 0.19631, 0.21012, 0.22392, 0.23773, 0.24847, 0.25767, 0.26841, 0.27761, 0.29142, 0.30829, 0.32363, 0.33744, 0.34971, 0.36198, 0.37272, 0.38806, 0.40033, 0.41260, 0.42334, 0.43255, 0.44022, 0.45095, 0.46323, 0.47550, 0.49084, 0.50311, 0.51692, 0.53226, 0.54913, 0.56600, 0.57981, 0.59208, 0.59975, 0.60742, 0.61816, 0.63043, 0.64117, 0.65191, 0.66111, 0.67338, 0.68566, 0.69639, 0.71020, 0.71940, 0.72861, 0.74241, 0.74702, 0.75929, 0.76236, 0.77003, 0.77770, 0.78690, 0.79764, 0.80838, 0.81911, 0.83292, 0.84366, 0.85593, 0.87127, 0.88508, 0.90042, 0.91422, 0.92803, 0.93723, 0.94490, 0.95411, 0.96484, 0.97712, 0.98479, 0.99706, 1.00780, 1.01700, 1.03541, 1.04001, 1.05075, 1.06609, 1.07683, 1.08756, 1.09370, 1.09984, 1.10597, 1.11211, 1.12438, 1.13512, 1.14279, 1.15199, 1.15813, 1.16273, 1.16733, 1.17040, 1.17347, 1.17500, 1.17500, 1.17500, 1.17500, 1.17654, 1.17654, 1.17654, 1.17500, 1.17500, 1.17654, 1.17654, 1.17654, 1.17654, 1.17654, 1.17654, 1.17807, 1.17807, 1.17807, 1.17807, 1.17807, 1.17807, 1.17654, 1.17500, 1.17040, 1.17040, 1.16887, 1.16887, 1.16733, 1.16580, 1.16273, 1.15966, 1.15659, 1.15353, 1.15046, 1.14892, 1.14739, 1.13972, 1.13512, 1.12745, 1.12285, 1.11978, 1.11518, 1.11211, 1.10751, 1.10290, 1.10137, 1.09830, 1.09830, 1.09830, 1.09830, 1.09830, 1.09830, 1.09677, 1.09677, 1.09677, 1.09677, 1.10290, 1.10597, 1.10597, 1.10751, 1.10597, 1.10597, 1.10597, 1.10597, 1.10597, 1.10597, 1.10597, 1.10597, 1.10751, 1.10597, 1.10597, 1.10597, 1.10597, 1.10751, 1.10751, 1.10751, 1.10751, 1.10597, 1.10751, 1.10597, 1.10751, 1.10597, 1.10597, 1.10597, 1.10597, 1.10597, 1.10751, 1.10597, 1.10751, 1.10597, 1.10597, 1.10597, 1.10597, 1.10597, 1.10751, 1.10597, 1.10751, 1.10597, 1.10597, 1.10597];
% T3=[ 0 0 0];
% T4=[0 0 0];
T3=zeros(1,350);
T4=zeros(1,350);
%plot(1:size(T1),T1)
% size(T1)
% size(T2)
% size(T3)
% size(T4)

% name1='RotLElbowRoll';
% name2='RotLElbowYaw';
% name3='RotLShoulderPitch';
% name4='RotLShoulderRoll';
% learn_dcp_batch(ID1,T1,name1);
% learn_dcp_batch(ID2,T2,name2);
% learn_dcp_batch(ID3,T3,name3);
% learn_dcp_batch(ID4,T4,name4);
% if(any(massimo==1000))
%     massimo(1)=max(T1);
%     massimo(2)=max(T2);
%     massimo(3)=max(T3);
%     massimo(4)=max(T4);
% else
%     if(max(T1)>massimo(1))
%         massimo(1)=max(T1);
%     end
%     if(max(T2)>massimo(2))
%         massimo(2)=max(T2);
%     end
%     if(max(T3)>massimo(3))
%         massimo(3)=max(T3);
%     end
%     if(max(T4)>massimo(4))
%         massimo(4)=max(T4);
%     end
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(T1);
%     minimo(2)=min(T2);
%     minimo(3)=min(T3);
%     minimo(4)=min(T4);
% else
%     if(min(T1)<minimo(1))
%         minimo(1)=min(T1);
%     end
%     if(min(T2)<minimo(2))
%         minimo(2)=min(T2);
%     end
%     if(min(T3)<minimo(3))
%         minimo(3)=min(T3);
%     end
%     if(min(T4)<minimo(4))
%          minimo(4)=min(T4);
%     end
% end

T5=zeros(1,350);
for i=1:350
leftMatrix(i,:)=fLeftHandH25([T3(i);T4(i);T2(i);T1(i);T5(i)]);end;

name1='RotazioneX';
 name2='RotazioneY';
 name3='RotazioneZ';
 name4='RotazioneWX';
 name5='RotazioneWY';
 name6='RotazioneWZ';
 namesCoords={name1, name2, name3, name4,name5,name6};
%  learn_dcp_batch(ID1,leftMatrix(:,1)',name1);
%  learn_dcp_batch(ID2,leftMatrix(:,2)',name2);
%  learn_dcp_batch(ID3,leftMatrix(:,3)',name3);
tau  = 0.5;
dt  = 0.001;
len=tau/dt;
x=1:350;
xx=linspace(1,350,floor(len+1)+ 3);
n_rfs     = [15 15 15 15 15 15];
time = (0:1:len)';
index=1;
for i=ID1:ID3
    traj=csaps(x,leftMatrix(:,index)',0.9,xx);
    Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len,namesCoords(index));
    T(:,index)=Y(:,1);%501 valori
    index=index+1;
    dcp('reset_state',i, traj(1));
    dcp('set_goal',i,traj(floor(len+1)),1);
    %   goal(i)=T(floor(len+1),i);
    %     %%%%%%%%%%%%%%per plottare
    %     traj=traj(1:501)';
    % figure(i)
    %
    %     plot(time,Y(:,1),'b -o',time,traj,'r');
    %     title('y');
    %     aa=axis;
    %     axis([min(time) max(time) aa(3:4)]);
    %     %%%%%%%%%%%%%%%%%%%%%%
end


%  learn_dcp_batch(ID4,leftMatrix(:,4)',name4);
%  learn_dcp_batch(ID5,leftMatrix(:,5)',name5);
%  learn_dcp_batch(ID6,leftMatrix(:,6)',name6);
% 
% index=4;
% for i=ID4:ID6
%     traj=csaps(x,leftMatrix(:,index)',0.9,xx);
%     Y=learn_dcp_batch_oa(i,dt,0,tau,n_rfs(index),0,traj,0,len,namesCoords(index));
%     T(:,index)=Y(:,1);%501 valori
%     index=index+1;
%     dcp('reset_state',i, traj(1));
%     dcp('set_goal',i,traj(floor(len+1)),1);
%     %  goal(i)=T(floor(len+1),i);
%     %     %%%%%%%%%%%%%%per plottare
%     %     traj=traj(1:501)';
%     % figure(i)
%     %
%     %     plot(time,Y(:,1),'b -o',time,traj,'r');
%     %     title('y');
%     %     aa=axis;
%     %     axis([min(time) max(time) aa(3:4)]);
%     %     %%%%%%%%%%%%%%%%%%%%%%
% end
% %  
%  
%  if(any(massimo==1000))
%     massimo(1)=max(leftMatrix(:,1)');
%     massimo(2)=max(leftMatrix(:,2)');
%     massimo(3)=max(leftMatrix(:,3)');
%     massimo(4)=max(leftMatrix(:,4)');
%     massimo(5)=max(leftMatrix(:,5)');
%     massimo(6)=max(leftMatrix(:,6)');
% else
%     if(max(leftMatrix(:,1)')>massimo(1))
%         massimo(1)=max(leftMatrix(:,1)');
%     end
%     if(max(leftMatrix(:,2)')>massimo(2))
%         massimo(2)=max(leftMatrix(:,2)');
%     end
%     if(max(leftMatrix(:,3)')>massimo(3))
%         massimo(3)=max(leftMatrix(:,3)');
%     end
%     if(max(leftMatrix(:,4)')>massimo(4))
%         massimo(4)=max(leftMatrix(:,4)');
%     end
%     
%     if(max(leftMatrix(:,5)')>massimo(5))
%         massimo(5)=max(leftMatrix(:,5)');
%     end
%     
%     if(max(leftMatrix(:,6)')>massimo(6))
%         massimo(6)=max(leftMatrix(:,6)');
%     end
%     
% end
% 
% if(any(minimo==1000))
%     minimo(1)=min(leftMatrix(:,1)');
%     minimo(2)=min(leftMatrix(:,2)');
%     minimo(3)=min(leftMatrix(:,3)');
%     minimo(4)=min(leftMatrix(:,4)');
%     minimo(5)=min(leftMatrix(:,5)');
%     minimo(6)=min(leftMatrix(:,6)');
% else
%     if(min(leftMatrix(:,1)')>minimo(1))
%         minimo(1)=min(leftMatrix(:,1)');
%     end
%     if(min(leftMatrix(:,2)')>minimo(2))
%         minimo(2)=min(leftMatrix(:,2)');
%     end
%     if(min(leftMatrix(:,3)')>minimo(3))
%         minimo(3)=min(leftMatrix(:,3)');
%     end
%     if(min(leftMatrix(:,4)')>minimo(4))
%         minimo(4)=min(leftMatrix(:,4)');
%     end
%     
%     if(min(leftMatrix(:,5)')>minimo(5))
%         minimo(5)=min(leftMatrix(:,5)');
%     end
%     
%     if(min(leftMatrix(:,6)')>minimo(6))
%         minimo(6)=min(leftMatrix(:,6)');
%     end
%     
% end




end